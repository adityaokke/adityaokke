# Sample workflow for building and deploying an Astro site to GitHub Pages
#
# To get started with Astro see: https://docs.astro.build/en/getting-started/
#
name: Deploy Astro site to GCS

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
# concurrency:
#   group: "pages"
#   cancel-in-progress: false

# env:
#   BUILD_PATH: "." # default value when not using subfolders
#   # BUILD_PATH: subfolder

jobs:
  # build:
  #   name: Build
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #     - name: Detect package manager
  #       id: detect-package-manager
  #       run: |
  #         if [ -f "${{ github.workspace }}/yarn.lock" ]; then
  #           echo "manager=yarn" >> $GITHUB_OUTPUT
  #           echo "command=install" >> $GITHUB_OUTPUT
  #           echo "runner=yarn" >> $GITHUB_OUTPUT
  #           echo "lockfile=yarn.lock" >> $GITHUB_OUTPUT
  #           exit 0
  #         elif [ -f "${{ github.workspace }}/package.json" ]; then
  #           echo "manager=npm" >> $GITHUB_OUTPUT
  #           echo "command=ci" >> $GITHUB_OUTPUT
  #           echo "runner=npx --no-install" >> $GITHUB_OUTPUT
  #           echo "lockfile=package-lock.json" >> $GITHUB_OUTPUT
  #           exit 0
  #         else
  #           echo "Unable to determine package manager"
  #           exit 1
  #         fi
  #     - name: Setup Node
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: "20"
  #         cache: ${{ steps.detect-package-manager.outputs.manager }}
  #         cache-dependency-path: ${{ env.BUILD_PATH }}/${{ steps.detect-package-manager.outputs.lockfile }}
  #     - name: Setup Pages
  #       id: pages
  #       uses: actions/configure-pages@v5
  #     - name: Install dependencies
  #       run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
  #       working-directory: ${{ env.BUILD_PATH }}
  #     - name: Build with Astro
  #       run: |
  #         ${{ steps.detect-package-manager.outputs.runner }} astro build \
  #           --site "${{ steps.pages.outputs.origin }}" \
  #           --base "${{ steps.pages.outputs.base_path }}"
  #       working-directory: ${{ env.BUILD_PATH }}
  #     - name: Upload artifact
  #       uses: actions/upload-pages-artifact@v3
  #       with:
  #         path: ${{ env.BUILD_PATH }}/dist

  # deploy:
  #   environment:
  #     name: github-pages
  #     url: ${{ steps.deployment.outputs.page_url }}
  #   needs: build
  #   runs-on: ubuntu-latest
  #   name: Deploy
  #   steps:
  #     - name: Deploy to GitHub Pages
  #       id: deployment
  #       uses: actions/deploy-pages@v4
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write    # needed for WIF
      contents: read
    env:
      BUCKET: adityaokke-astro
      REGION: us-east1
    steps:
      - id: 'checkout'
        uses: 'actions/checkout@v4'

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - run: npm ci
      - run: npm run build

      # Authenticate to GCP (WIF)
      - id: 'auth_WIF'
        name: Auth to Google Cloud (WIF)
        uses: 'google-github-actions/auth@v3'
        with:
          workload_identity_provider: projects/858937779144/locations/global/workloadIdentityPools/github-action-pool-id/providers/github-actions
          service_account: github-action-service-account@adityaokke.iam.gserviceaccount.com

      # - name: ADC sanity
      #   run: |
      #     echo "GOOGLE_APPLICATION_CREDENTIALS=$GOOGLE_APPLICATION_CREDENTIALS"
      #     gcloud --version
      #     # This should succeed if WIF + SA are correct:
      #     gcloud auth print-access-token >/dev/null && echo "Access token OK"
      #     # Try a harmless Storage call:
      #     gcloud storage ls gs://${BUCKET} >/dev/null && echo "Bucket access OK"

      # - name: Who am I?
      #   run: |
      #     echo "GOOGLE_APPLICATION_CREDENTIALS=$GOOGLE_APPLICATION_CREDENTIALS"
      #     gcloud --version
      #     gcloud auth list
      #     gcloud config list account
      #     # Try to mint an access token (this will fail if Token Creator/Impersonation missing)
      #     gcloud auth print-access-token >/dev/null && echo "Minted access token OK"

      # Can we call the bucket?
      - name: Can list bucket?
        run: gsutil ls gs://$BUCKET || true
      # - name: Setup gcloud
      #   uses: google-github-actions/setup-gcloud@v2

      # - name: Upload to GCS
      #   run: |
      #     gsutil -m rsync -r -d ./dist gs://$BUCKET
      #     # Cache control: assets (immutable)
      #     if gsutil ls gs://$BUCKET/assets >/dev/null 2>&1; then
      #       gsutil -m setmeta -h "Cache-Control:public,max-age=31536000,immutable" gs://$BUCKET/assets/** || true
      #     fi
      #     # Cache control: HTML (short)
      #     gsutil -m setmeta -h "Cache-Control:public,max-age=300" gs://$BUCKET/**/*.html || true


      - id: 'upload-folder'
        name: 'Upload folder to GCS'
        uses: 'google-github-actions/upload-cloud-storage@v3'
        with:
          path: dist/
          destination: adityaokke-astro
          parent: false

      # Example of using the output
      # - id: 'uploaded-files'
      #   name: 'Do something with the uploaded files'
      #   uses: 'foo/bar@v1'
      #   env:
      #     files: '${{ steps.upload-folder.outputs.uploaded }}'